---
# tasks file for libvirt-provision
#- name: Ensure RPM dependencies are in place
#  dnf:
#    name:
#      - guestfs-tools
#      - python3-libvirt
#    state: present
#  become: yes

- name: "Define network bridge: {{ libvirt_net_name1 }}"
  community.libvirt.virt_net:
    command: define
    name: "{{ libvirt_net_name1 }}"
    xml: '{{ lookup("template", "templates/bridge1.xml.j2") }}'

- name: "Define network bridge: {{ libvirt_net_name2 }}"
  community.libvirt.virt_net:
    command: define
    name: "{{ libvirt_net_name2 }}"
    xml: '{{ lookup("template", "templates/bridge2.xml.j2") }}'

- name: "Start network: {{ libvirt_net_name1 }}"
  community.libvirt.virt_net:
    command: create
    name: "{{ libvirt_net_name1 }}"

- name: "Start network: {{ libvirt_net_name2 }}"
  community.libvirt.virt_net:
    command: create
    name: "{{ libvirt_net_name2 }}"

- name: Get VMs list
  community.libvirt.virt:
    command: list_vms
  register: existing_vms
  changed_when: no

- name: Create VM if it does not exist
  block:
  - name: Check for download
    stat:
      path: "/tmp/{{ base_image_name }}"
    register: download_file

  - name: Download base image
    get_url:
      url: "{{ base_image_url }}"
      dest: "/tmp/{{ base_image_name }}"
      checksum: "sha256:{{ base_image_sha }}"
    when: download_file.state.exists is false

  - name: Copy base image to libvirt directory
    copy:
      dest: "{{ libvirt_pool_dir }}/{{ vm_name }}.qcow2"
      src: "/tmp/{{ base_image_name }}"
      force: no
      remote_src: yes 
      mode: 0660
    register: copy_results

  - name: Configure the image
    command: |
      virt-customize -a {{ libvirt_pool_dir }}/{{ vm_name }}.qcow2 \
      --hostname {{ vm_name }} \
      --root-password password:{{ vm_root_pass }} \
      --ssh-inject 'root:file:{{ ssh_key }}' \
      --uninstall cloud-init --selinux-relabel
    when: copy_results is changed

  - name: Define VM
    community.libvirt.virt:
      command: define
      xml: "{{ lookup('template', 'vm-template.xml.j2') }}"
    when: vm_state == "running"

- name: Ensure VM state
  community.libvirt.virt:
    name: "{{ vm_name }}"
    state: "{{ vm_state }}"
  register: vm_start_results
  until: "vm_start_results is success"
  retries: 15
  delay: 2
  when: vm_state == "running"

- name: Undefine VM if told to destroy it
  community.libvirt.virt:
    command: undefine
    name: "{{ vm_name }}"
  when: vm_state == "destroyed"

- name: Remove VM if told to destroy it
  community.libvirt.virt:
    name: "{{ vm_name }}"
    state: shutdown


